"use strict";!function(e){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?module.exports=e:"function"==typeof define&&define.amd?define(function(){return e}):chai.use(e)}(function(e,t){function a(e){return"function"==typeof e&&"function"==typeof e.getCall&&"function"==typeof e.calledWithExactly}function n(e){switch(e){case 1:return"once";case 2:return"twice";case 3:return"thrice";default:return(e||0)+" times"}}function i(e){return e&&a(e.proxy)}function c(e){if(!a(e._obj)&&!i(e._obj))throw new TypeError(t.inspect(e._obj)+" is not a spy or a call to a spy!")}function l(e,t,n,i,c){function l(t){return e.printf.apply(e,t)}var o=i?"always have ":"have ";return n=n||"",a(e.proxy)&&(e=e.proxy),{affirmative:function(){return l(["expected %n to "+o+t+n].concat(c))},negative:function(){return l(["expected %n to not "+o+t].concat(c))}}}function o(a,n,i){t.addProperty(e.Assertion.prototype,a,function(){c(this);var e=l(this._obj,n,i,!1);this.assert(this._obj[a],e.affirmative,e.negative)})}function r(e,a,n){return function(){c(this);var i="always"+e[0].toUpperCase()+e.substring(1),o=t.flag(this,"always")&&"function"==typeof this._obj[i],r=o?i:e,s=l(this._obj,a,n,o,f.call(arguments));this.assert(this._obj[r].apply(this._obj,arguments),s.affirmative,s.negative)}}function s(a,n,i,c){var l=r(n,i,c);t.addMethod(e.Assertion.prototype,a,l)}function d(e,t,a){s(e,e,t,a)}var f=Array.prototype.slice;t.addProperty(e.Assertion.prototype,"always",function(){t.flag(this,"always",!0)}),o("called","been called"," at least once, but it was never called"),function(a,i,o){t.addMethod(e.Assertion.prototype,a,function(e){c(this);var t=l(this._obj,i,o,!1,[n(e)]);this.assert(this._obj[a]===e,t.affirmative,t.negative)})}("callCount","been called exactly %1",", but it was called %c%C"),o("calledOnce","been called exactly once",", but it was called %c%C"),o("calledTwice","been called exactly twice",", but it was called %c%C"),o("calledThrice","been called exactly thrice",", but it was called %c%C"),function(a,n,i){var c=r(a,n,i);t.addProperty(e.Assertion.prototype,a,c)}("calledWithNew","been called with new"),d("calledBefore","been called before %1"),d("calledAfter","been called after %1"),d("calledImmediatelyBefore","been called immediately before %1"),d("calledImmediatelyAfter","been called immediately after %1"),d("calledOn","been called with %1 as this",", but it was called with %t instead"),d("calledWith","been called with arguments %*","%D"),d("calledWithExactly","been called with exact arguments %*","%D"),d("calledWithMatch","been called with arguments matching %*","%D"),d("returned","returned %1"),s("thrown","threw","thrown %1")});