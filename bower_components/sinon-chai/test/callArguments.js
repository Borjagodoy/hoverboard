"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Call arguments",function(){var t=null,e=null,o=null,n=null,h=null,r=null,l=null;beforeEach(function(){t=sinon.spy(),e="A",o="B",n={D:"E"},h={D:{E:{E:"P"}}},r="C",l=sinon.match.any}),describe("calledWith",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){t.should.have.been.calledWith(e,o)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){t(e,o),expect(function(){t.should.have.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.getCall(0).should.have.been.calledWith(e,o)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){t(e,o,r),expect(function(){t.should.have.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.getCall(0).should.have.been.calledWith(e,o)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){t(r,e),expect(function(){t.should.have.been.calledWith(e,o)}).to.throw(AssertionError),expect(function(){t.getCall(0).should.have.been.calledWith(e,o)}).to.throw(AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){t(r,e),t(e,o),expect(function(){t.should.have.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.getCall(1).should.have.been.calledWith(e,o)}).to.not.throw()}),it("should handle objects in arguments",function(){t(e,n);var o=JSON.parse(JSON.stringify(n));expect(function(){t.should.have.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.getCall(0).should.have.been.calledWith(e,o)}).to.not.throw()}),it("should handle deep objects in arguments",function(){t(e,h);var o=JSON.parse(JSON.stringify(h));expect(function(){t.should.have.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.getCall(0).should.have.been.calledWith(e,o)}).to.not.throw()})}),describe("always calledWith",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){t.should.always.have.been.calledWith(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWith(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWith(e,o)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){t(e,o),expect(function(){t.should.always.have.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.should.have.always.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.should.have.been.always.calledWith(e,o)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){t(e,o,r),expect(function(){t.should.always.have.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.should.have.always.been.calledWith(e,o)}).to.not.throw(),expect(function(){t.should.have.been.always.calledWith(e,o)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){t(r,e),expect(function(){t.should.always.have.been.calledWith(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWith(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWith(e,o)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){t(r,e),t(e,o),expect(function(){t.should.always.have.been.calledWith(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWith(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWith(e,o)}).to.throw(AssertionError)})}),describe("calledWithExactly",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){t.should.have.been.calledWithExactly(e,o)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){t(e,o),expect(function(){t.should.have.been.calledWithExactly(e,o)}).to.not.throw(),expect(function(){t.getCall(0).should.have.been.calledWithExactly(e,o)}).to.not.throw()}),it("should throw an assertion error when the spy is called with the correct arguments and more",function(){t(e,o,r),expect(function(){t.should.have.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.getCall(0).should.have.been.calledWithExactly(e,o)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){t(r,e),expect(function(){t.should.have.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.getCall(0).should.have.been.calledWithExactly(e,o)}).to.throw(AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){t(r,e),t(e,o),expect(function(){t.should.have.been.calledWithExactly(e,o)}).to.not.throw(),expect(function(){t.getCall(1).should.have.been.calledWithExactly(e,o)}).to.not.throw()})}),describe("always calledWithExactly",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){t.should.always.have.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWithExactly(e,o)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){t(e,o),expect(function(){t.should.always.have.been.calledWithExactly(e,o)}).to.not.throw(),expect(function(){t.should.have.always.been.calledWithExactly(e,o)}).to.not.throw(),expect(function(){t.should.have.been.always.calledWithExactly(e,o)}).to.not.throw()}),it("should throw an assertion error when the spy is called with the correct arguments and more",function(){t(e,o,r),expect(function(){t.should.always.have.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWithExactly(e,o)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){t(r,e),expect(function(){t.should.always.have.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWithExactly(e,o)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){t(r,e),t(e,o),expect(function(){t.should.always.have.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWithExactly(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWithExactly(e,o)}).to.throw(AssertionError)})}),describe("calledWithMatch",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){t.should.have.been.calledWithMatch(l,l)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){t(e,o),expect(function(){t.should.have.been.calledWithMatch(l,l)}).to.not.throw(),expect(function(){t.getCall(0).should.have.been.calledWithMatch(l,l)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){t(e,o,r),expect(function(){t.should.have.been.calledWithMatch(l,l)}).to.not.throw(),expect(function(){t.getCall(0).should.have.been.calledWithMatch(l,l)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){t(r,e),expect(function(){t.should.have.been.calledWithMatch(l,o)}).to.throw(AssertionError),expect(function(){t.getCall(0).should.have.been.calledWithMatch(e,l)}).to.throw(AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){t(r,e),t(e,o),expect(function(){t.should.have.been.calledWithMatch(e,o)}).to.not.throw(),expect(function(){t.getCall(1).should.have.been.calledWithMatch(e,o)}).to.not.throw()})}),describe("always calledWithMatch",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){t.should.always.have.been.calledWithMatch(l,l)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWithMatch(e,l)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWithMatch(l,o)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){t(e,o),expect(function(){t.should.always.have.been.calledWithMatch(l,l)}).to.not.throw(),expect(function(){t.should.have.always.been.calledWithMatch(l,o)}).to.not.throw(),expect(function(){t.should.have.been.always.calledWithMatch(e,l)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){t(e,o,r),expect(function(){t.should.always.have.been.calledWithMatch(l,l)}).to.not.throw(),expect(function(){t.should.have.always.been.calledWithMatch(l,o)}).to.not.throw(),expect(function(){t.should.have.been.always.calledWithMatch(e,l)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){t(r,e),expect(function(){t.should.always.have.been.calledWithMatch(l,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWithMatch(e,l)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWithMatch(e,o)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){t(r,e),t(e,o),expect(function(){t.should.always.have.been.calledWithMatch(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.always.been.calledWithMatch(e,o)}).to.throw(AssertionError),expect(function(){t.should.have.been.always.calledWithMatch(e,o)}).to.throw(AssertionError)})})});