"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Returning",function(){describe("returned",function(){it("should throw an assertion error if the spy does not return the correct value",function(){var t=sinon.spy.create(function(){return 1});t(),expect(function(){t.should.have.returned(2)}).to.throw(AssertionError),expect(function(){t.getCall(0).should.have.returned(2)}).to.throw(AssertionError)}),it("should not throw if the spy returns the correct value",function(){var t=sinon.spy.create(function(){return 1});t(),expect(function(){t.should.have.returned(1)}).to.not.throw(),expect(function(){t.getCall(0).should.have.returned(1)}).to.not.throw()}),it("should not throw if the spy returns the correct value amongst others",function(){var t=[1,2,3],e=sinon.spy.create(function(){return t[e.callCount-1]});e(),e(),e(),expect(function(){e.should.have.returned(1)}).to.not.throw(),expect(function(){e.getCall(0).should.have.returned(1)}).to.not.throw()})}),describe("always returned",function(){it("should throw an assertion error if the spy does not return the correct value",function(){var t=sinon.spy.create(function(){return 1});t(),expect(function(){t.should.always.have.returned(2)}).to.throw(AssertionError),expect(function(){t.should.have.always.returned(2)}).to.throw(AssertionError)}),it("should not throw if the spy returns the correct value",function(){var t=sinon.spy.create(function(){return 1});t(),expect(function(){t.should.have.always.returned(1)}).to.not.throw(),expect(function(){t.should.always.have.returned(1)}).to.not.throw()}),it("should throw an assertion error if the spy returns the correct value amongst others",function(){var t=sinon.spy.create(function(){t.callCount});t(),t(),t(),expect(function(){t.should.always.have.returned(1)}).to.throw(AssertionError),expect(function(){t.should.have.always.returned(1)}).to.throw(AssertionError)})})});