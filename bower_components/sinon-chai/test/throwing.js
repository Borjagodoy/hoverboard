"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect,swallow=require("./common").swallow;describe("Throwing",function(){describe("thrown()",function(){it("should throw an assertion error if the spy does not throw at all",function(){var o=sinon.spy.create(function(){});o(),expect(function(){o.should.have.thrown()}).to.throw(AssertionError),expect(function(){o.getCall(0).should.have.thrown()}).to.throw(AssertionError)}),it("should not throw if the spy throws",function(){var o=sinon.spy.create(function(){throw new Error});swallow(o),expect(function(){o.should.have.thrown()}).to.not.throw(),expect(function(){o.getCall(0).should.have.thrown()}).to.not.throw()}),it("should not throw if the spy throws once but not the next time",function(){var o=sinon.spy.create(function(){if(!(o.callCount>1))throw new Error});swallow(o),swallow(o),expect(function(){o.should.have.thrown()}).to.not.throw(),expect(function(){o.getCall(0).should.have.thrown()}).to.not.throw()})}),describe("thrown(errorObject)",function(){var o=null;beforeEach(function(){o=new Error("boo!")}),it("should throw an assertion error if the spy does not throw at all",function(){var t=sinon.spy.create(function(){});t(),expect(function(){t.should.have.thrown(o)}).to.throw(AssertionError),expect(function(){t.getCall(0).should.have.thrown(o)}).to.throw(AssertionError)}),it("should throw an assertion error if the spy throws the wrong error",function(){var t=sinon.spy.create(function(){return new Error("eek!")});swallow(t),expect(function(){t.should.have.thrown(o)}).to.throw(AssertionError),expect(function(){t.getCall(0).should.have.thrown(o)}).to.throw(AssertionError)}),it("should not throw if the spy throws",function(){var t=sinon.spy.create(function(){throw o});swallow(t),expect(function(){t.should.have.thrown(o)}).to.not.throw(),expect(function(){t.getCall(0).should.have.thrown(o)}).to.not.throw()}),it("should not throw if the spy throws once but not the next time",function(){var t=sinon.spy.create(function(){if(!(t.callCount>1))throw o});swallow(t),swallow(t),expect(function(){t.should.have.thrown(o)}).to.not.throw(),expect(function(){t.getCall(0).should.have.thrown(o)}).to.not.throw()})}),describe("thrown(errorTypeString)",function(){var o=null;beforeEach(function(){o=new TypeError("boo!")}),it("should throw an assertion error if the spy does not throw at all",function(){var o=sinon.spy.create(function(){});o(),expect(function(){o.should.have.thrown("TypeError")}).to.throw(AssertionError),expect(function(){o.getCall(0).should.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should throw an assertion error if the spy throws the wrong type of error",function(){var o=sinon.spy.create(function(){throw new Error("boo!")});swallow(o),expect(function(){o.should.have.thrown("TypeError")}).to.throw(AssertionError),expect(function(){o.getCall(0).should.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should not throw if the spy throws the correct type of error",function(){var o=sinon.spy.create(function(){throw new TypeError("eek!")});swallow(o),expect(function(){o.should.have.thrown("TypeError")}).to.not.throw(),expect(function(){o.getCall(0).should.have.thrown("TypeError")}).to.not.throw()}),it("should not throw if the spy throws once but not the next time",function(){var t=sinon.spy.create(function(){if(!(t.callCount>1))throw o});swallow(t),swallow(t),expect(function(){t.should.have.thrown("TypeError")}).to.not.throw(),expect(function(){t.getCall(0).should.have.thrown("TypeError")}).to.not.throw()})}),describe("always thrown",function(){var o=null;beforeEach(function(){o=new TypeError("boo!")}),it("should throw an assertion error if the spy throws once but not the next time",function(){var t=sinon.spy.create(function(){if(!(t.callCount>1))throw o});swallow(t),swallow(t),expect(function(){t.should.have.always.thrown()}).to.throw(AssertionError),expect(function(){t.should.always.have.thrown()}).to.throw(AssertionError),expect(function(){t.should.have.always.thrown(o)}).to.throw(AssertionError),expect(function(){t.should.always.have.thrown(o)}).to.throw(AssertionError),expect(function(){t.should.have.always.thrown("TypeError")}).to.throw(AssertionError),expect(function(){t.should.always.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should throw an assertion error if the spy throws the wrong error the second time",function(){var t=sinon.spy.create(function(){throw 1===t.callCount?o:new Error});swallow(t),swallow(t),expect(function(){t.should.have.always.thrown(o)}).to.throw(AssertionError),expect(function(){t.should.always.have.thrown(o)}).to.throw(AssertionError),expect(function(){t.should.have.always.thrown("TypeError")}).to.throw(AssertionError),expect(function(){t.should.always.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should not throw if the spy always throws the right error",function(){var t=sinon.spy.create(function(){throw o});swallow(t),swallow(t),expect(function(){t.should.have.always.thrown(o)}).to.not.throw(),expect(function(){t.should.always.have.thrown(o)}).to.not.throw(),expect(function(){t.should.have.always.thrown("TypeError")}).to.not.throw(),expect(function(){t.should.always.have.thrown("TypeError")}).to.not.throw()})})});