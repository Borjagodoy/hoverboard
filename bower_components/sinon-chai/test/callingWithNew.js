"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Calling with new",function(){var e=null;beforeEach(function(){e=sinon.spy()}),describe("calledWithNew",function(){it("should throw an assertion error if the spy is never called",function(){expect(function(){e.should.have.been.calledWithNew}).to.throw(AssertionError)}),it("should throw an assertion error if the spy is called without `new`",function(){e(),expect(function(){e.should.have.been.calledWithNew}).to.throw(AssertionError),expect(function(){e.getCall(0).should.have.been.calledWithNew}).to.throw(AssertionError)}),it("should not throw if the spy is called with `new`",function(){new e,expect(function(){e.should.have.been.calledWithNew}).to.not.throw(),expect(function(){e.getCall(0).should.have.been.calledWithNew}).to.not.throw()}),it("should not throw if the spy is called with `new` and also without `new`",function(){e(),new e,expect(function(){e.should.have.been.calledWithNew}).to.not.throw(),expect(function(){e.getCall(1).should.have.been.calledWithNew}).to.not.throw()})}),describe("always calledWithNew",function(){it("should throw an assertion error if the spy is never called",function(){expect(function(){e.should.always.have.been.calledWithNew}).to.throw(AssertionError),expect(function(){e.should.have.always.been.calledWithNew}).to.throw(AssertionError),expect(function(){e.should.have.been.always.calledWithNew}).to.throw(AssertionError)}),it("should throw an assertion error if the spy is called without `new`",function(){e(),expect(function(){e.should.always.have.been.calledWithNew}).to.throw(AssertionError),expect(function(){e.should.have.always.been.calledWithNew}).to.throw(AssertionError),expect(function(){e.should.have.been.always.calledWithNew}).to.throw(AssertionError)}),it("should not throw if the spy is called with `new`",function(){new e,expect(function(){e.should.always.have.been.calledWithNew}).to.not.throw(),expect(function(){e.should.have.always.been.calledWithNew}).to.not.throw(),expect(function(){e.should.have.been.always.calledWithNew}).to.not.throw()}),it("should throw an assertion error if the spy is called with `new` and also without `new`",function(){e(),new e,expect(function(){e.should.always.have.been.calledWithNew}).to.throw(AssertionError),expect(function(){e.should.have.always.been.calledWithNew}).to.throw(AssertionError),expect(function(){e.should.have.been.always.calledWithNew}).to.throw(AssertionError)})})});