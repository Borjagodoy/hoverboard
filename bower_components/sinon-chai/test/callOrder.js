"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Call order",function(){var e=sinon.spy(),o=null,t=null;beforeEach(function(){e=sinon.spy(),o=sinon.spy(),t=sinon.spy()}),describe("spy1 calledBefore spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){e.should.have.been.calledBefore(o)}).to.throw(AssertionError)}),it("should not throw when only spy 1 is called",function(){e(),expect(function(){e.should.have.been.calledBefore(o)}).to.not.throw()}),it("should throw an assertion error when only spy 2 is called",function(){o(),expect(function(){e.should.have.been.calledBefore(o)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called before spy 2",function(){e(),o(),expect(function(){e.should.have.been.calledBefore(o)}).to.not.throw()}),it("should throw an assertion error when spy 1 is called after spy 2",function(){o(),e(),expect(function(){e.should.have.been.calledBefore(o)}).to.throw(AssertionError)})}),e.calledImmediatelyBefore&&describe("spy1 calledImmediatelyBefore spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){e.should.have.been.calledImmediatelyBefore(o)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 1 is called",function(){e(),expect(function(){e.should.have.been.calledImmediatelyBefore(o)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 2 is called",function(){o(),expect(function(){e.should.have.been.calledImmediatelyBefore(o)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called immediately before spy 2",function(){e(),o(),expect(function(){e.should.have.been.calledImmediatelyBefore(o)}).to.not.throw()}),it("should throw an assertion error when spy 1 is called before spy 2, but not immediately",function(){o(),t(),e(),expect(function(){e.should.have.been.calledImmediatelyBefore(o)}).to.throw(AssertionError)}),it("should throw an assertion error when spy 1 is called after spy 2",function(){o(),e(),expect(function(){e.should.have.been.calledImmediatelyBefore(o)}).to.throw(AssertionError)})}),describe("spy1 calledAfter spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){e.should.have.been.calledAfter(o)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 1 is called",function(){e(),expect(function(){e.should.have.been.calledAfter(o)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 2 is called",function(){o(),expect(function(){e.should.have.been.calledAfter(o)}).to.throw(AssertionError)}),it("should throw an assertion error when spy 1 is called before spy 2",function(){e(),o(),expect(function(){e.should.have.been.calledAfter(o)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called after spy 2",function(){o(),e(),expect(function(){e.should.have.been.calledAfter(o)}).to.not.throw()})}),e.calledImmediatelyAfter&&describe("spy1 calledImmediatelyAfter spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){e.should.have.been.calledImmediatelyAfter(o)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 1 is called",function(){e(),expect(function(){e.should.have.been.calledImmediatelyAfter(o)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 2 is called",function(){o(),expect(function(){e.should.have.been.calledImmediatelyAfter(o)}).to.throw(AssertionError)}),it("should throw an assertion error when spy 1 is called before spy 2",function(){e(),o(),expect(function(){e.should.have.been.calledImmediatelyAfter(o)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called immediately after spy 2",function(){o(),e(),expect(function(){e.should.have.been.calledImmediatelyAfter(o)}).to.not.throw()}),it("should throw an assertion error when spy 1 is called after spy 2, but not immediately",function(){e(),t(),o(),expect(function(){e.should.have.been.calledImmediatelyAfter(o)}).to.throw(AssertionError)})})});