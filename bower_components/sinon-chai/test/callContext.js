"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Call context",function(){var e=null,o=null,t=null;beforeEach(function(){e=sinon.spy(),o={},t={}}),describe("calledOn",function(){it("should throw an assertion error if the spy is never called",function(){expect(function(){e.should.have.been.calledOn(o)}).to.throw(AssertionError)}),it("should throw an assertion error if the spy is called without a context",function(){e(),expect(function(){e.should.have.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.getCall(0).should.have.been.calledOn(o)}).to.throw(AssertionError)}),it("should throw an assertion error if the spy is called on the wrong context",function(){e.call(t),expect(function(){e.should.have.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.getCall(0).should.have.been.calledOn(o)}).to.throw(AssertionError)}),it("should not throw if the spy is called on the specified context",function(){e.call(o),expect(function(){e.should.have.been.calledOn(o)}).to.not.throw(),expect(function(){e.getCall(0).should.have.been.calledOn(o)}).to.not.throw()}),it("should not throw if the spy is called on another context and also the specified context",function(){e.call(t),e.call(o),expect(function(){e.should.have.been.calledOn(o)}).to.not.throw(),expect(function(){e.getCall(1).should.have.been.calledOn(o)}).to.not.throw()})}),describe("always calledOn",function(){it("should throw an assertion error if the spy is never called",function(){expect(function(){e.should.always.have.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.always.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.been.always.calledOn(o)}).to.throw(AssertionError)}),it("should throw an assertion error if the spy is called without a context",function(){e(),expect(function(){e.should.always.have.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.always.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.been.always.calledOn(o)}).to.throw(AssertionError)}),it("should throw an assertion error if the spy is called on the wrong context",function(){e.call(t),expect(function(){e.should.always.have.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.always.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.been.always.calledOn(o)}).to.throw(AssertionError)}),it("should not throw if the spy is called on the specified context",function(){e.call(o),expect(function(){e.should.always.have.been.calledOn(o)}).to.not.throw(),expect(function(){e.should.have.always.been.calledOn(o)}).to.not.throw(),expect(function(){e.should.have.been.always.calledOn(o)}).to.not.throw()}),it("should throw an assertion error if the spy is called on another context and also the specified context",function(){e.call(t),e.call(o),expect(function(){e.should.always.have.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.always.been.calledOn(o)}).to.throw(AssertionError),expect(function(){e.should.have.been.always.calledOn(o)}).to.throw(AssertionError)})})});